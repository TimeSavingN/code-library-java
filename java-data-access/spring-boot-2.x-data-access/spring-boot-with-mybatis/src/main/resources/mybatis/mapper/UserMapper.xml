<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.taogen.demo.mybatis.dao.UserDao">

    <resultMap id="userResultMap" type="com.taogen.demo.mybatis.entity.User">
        <id property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="password" column="password"/>
        <result property="email" column="email"/>
    </resultMap>

    <resultMap id="userWithAddressesResultMap" type="com.taogen.demo.mybatis.entity.User">
        <id column="a.user_id" property="userId"/>
        <result column="a.user_name" property="userName"/>
        <result column="a.password" property="password"/>
        <result column="a.email" property="email"/>
        <collection property="addressList" ofType="Address">
            <result column="b.address_id" property="addressId"/>
            <result column="b.city" property="city"/>
            <result column="b.street" property="street"/>
            <result column="b.user_id" property="userId"/>
        </collection>
    </resultMap>

    <select id="listUsers" resultMap="userResultMap">
        SELECT user_id,
        user_name,
        password,
        email
        FROM user
        <trim prefix="where" suffixOverrides="and">
            <if test="user != null">
                <if test="user.userId != null">
                    user_id = #{user.userId} and
                </if>
                <if test="userName != null and !userName.isEmpty()">
                    user_name = #{user.userName} and
                </if>
                <if test="password != null and !password.isEmpty()">
                    password = #{user.password} and
                </if>
                <if test="email != null and !email.isEmpty()">
                    email = #{user.email}
                </if>
            </if>
        </trim>
        <if test="page != null">
            <if test="page.orderBy != null">
                order by ${page.orderBy}
            </if>
            <if test="page.pageNo != null and page.pageSize != null ">
                limit ${(page.pageNo - 1) * page.pageSize}, ${page.pageSize}
            </if>
        </if>
    </select>

    <select id="listUsersWithAddresses" resultMap="userWithAddressesResultMap">
        select
        a.user_id as "a.user_id", a.user_name as "a.user_name", a.password as "a.password", a.email as "a.email"
        , b.address_id as "b.address_id", b.city as "b.city", b.street as "b.street", b.user_id as "b.user_id"
        from user as a
        inner join address as b on a.user_id = b.user_id
        inner join
        (
        SELECT distinct a.user_id
        FROM user as a
        inner join address as b on a.user_id = b.user_id
        <trim prefix="where" suffixOverrides="and">
            <if test="user != null">
                <if test="user.userId != null">
                    a.user_id = #{user.userId} and
                </if>
                <if test="user.userName != null and !user.userName.isEmpty()">
                    a.user_name like concat('%', #{user.userName}, '%') and
                </if>
                <if test="user.password != null and !user.password.isEmpty()">
                    a.password = #{user.password} and
                </if>
                <if test="user.email != null and !user.email.isEmpty()">
                    a.email = #{user.email}
                </if>
            </if>
            <if test="address != null">
                <if test="address.addressId != null">
                    b.address_id = #{address.addressId} and
                </if>
                <if test="address.city != null and !address.city.isEmpty()">
                    b.city like concat('%', #{address.city}, '%') and
                </if>
                <if test="address.street != null and !address.street.isEmpty()">
                    b.street = #{address.street} and
                </if>
                <if test="address.userId != null">
                    b.user_id = #{address.userId}
                </if>
            </if>
        </trim>
        <if test="page != null">
            <choose>
                <when test="page.orderBy != null and page.orderBy.trim() != ''">
                    order by ${page.orderBy}
                </when>
                <otherwise>
                    order by user_id desc
                </otherwise>
            </choose>
            <if test="page.pageNo != null and page.pageSize != null ">
                limit ${(page.pageNo - 1) * page.pageSize}, ${page.pageSize}
            </if>
        </if>
        ) as a2 on a.user_id = a2.user_id
        <if test="page != null">
            <choose>
                <when test="page.orderBy != null and page.orderBy.trim() != ''">
                    order by a.${page.orderBy}
                </when>
                <otherwise>
                    order by a.user_id desc
                </otherwise>
            </choose>
        </if>
    </select>
    <select id="getUser" parameterType="java.lang.Integer"
            resultMap="userResultMap">
        SELECT user_id, user_name, password, email
        FROM user
        WHERE user_id = #{id,jdbcType=INTEGER};
    </select>

    <insert id="saveUser"
            parameterType="com.taogen.demo.mybatis.entity.User"
            useGeneratedKeys="true" keyColumn="user_id" keyProperty="userId">
        INSERT
        INTO user(user_name, password,
                  email)
        VALUES (#{userName,jdbcType=VARCHAR},
                #{password,jdbcType=VARCHAR},
                #{email,jdbcType=VARCHAR});
    </insert>
    <update id="updateUser"
            parameterType="com.taogen.demo.mybatis.entity.User">
        UPDATE user
        SET user_name=#{userName,jdbcType=VARCHAR},
            password=#{password,jdbcType=VARCHAR},
            email=#{email,jdbcType=VARCHAR}
        WHERE user_id = #{userId,jdbcType=INTEGER};
    </update>
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE
        FROM user
        WHERE user_id = #{id,jdbcType=INTEGER}
    </delete>
</mapper>
