@startuml

''''''''''''''''''''''''''''''''''''
' Entity
''''''''''''''''''''''''''''''''''''

class entity.BaseEntity
{
    # int id
    # Timestamp createTime
    # Timestamp modifyTime
    # Boolean deleteFlag
}

class entity.Department
{
    'fields
    - String name
}

entity.BaseEntity <|-- entity.Department

class entity.Employee
{
    'fields
    - String name
    - String nickname
    - int age
    - Department dept
}

entity.BaseEntity <|-- entity.Employee
entity.Employee "many" <-- "1" entity.Department : has

class entity.Page
{
    - int pageNo
    - int pageSize
    - long count
    - String orderBy
    - int start
    + Page(int pageNo, int pageSize)
}

''''''''''''''''''''''''''''''''''''
' Mapper
''''''''''''''''''''''''''''''''''''

interface mapper.BaseMapper

interface mapper.CrudMapper
{
}

mapper.BaseMapper <|-- mapper.CrudMapper

interface mapper.DepartmentMapper
{
    + {abstract} int saveSelective(Department entity)
    + {abstract} int deleteById(Department entity)
    + {abstract} int deleteByIdLogically(Department entity)
    + {abstract} int deleteAll(Collection<Department> entities)
    + {abstract} int deleteAllLogically(Collection<Department> entities)
    + {abstract} int deleteAllByFields(Department entity)
    + {abstract} int deleteAllByMap(Map<String, Object> conditions)
    + {abstract} int updateSelective(Department entity)
    + {abstract} int updateAllFieldsByMap(Department entity, Map<String,Object> conditions)
    + {abstract} Department getById(Department entity)
    + {abstract} Department callById(Department entity)
    + {abstract} long count()
    + {abstract} long countByFields(Department entity)
    + {abstract} long countByMap(Map<String, Object> conditions)
    + {abstract} List<Department> findAllByFields(Department entity)
    + {abstract} List<Department> findPage(Page page, Department entity)
    + {abstract} List<Department> findAllByMap(Map<String, Object> conditions)
    + {abstract} int execInsertSql(String sql)
    + {abstract} int execDeleteSql(String sql)
    + {abstract} int execUpdateSql(String sql)
    + {abstract} List<Department> execSelectSql(String sql)
}

mapper.CrudMapper <|-- mapper.DepartmentMapper

interface mapper.EmployeeMapper
{
    + {abstract} int saveSelective(Employee entity)
    + {abstract} int deleteById(Employee entity)
    + {abstract} int deleteByIdLogically(Employee entity)
    + {abstract} int deleteAll(Collection<Employee> entities)
    + {abstract} int deleteAllLogically(Collection<Employee> entities)
    + {abstract} int deleteAllByFields(Employee entity)
    + {abstract} int deleteAllByMap(Map<String, Object> conditions)
    + {abstract} int updateSelective(Employee entity)
    + {abstract} int updateAllFieldsByMap(Employee entity, Map<String,Object> conditions)
    + {abstract} Employee getById(Employee entity)
    + {abstract} Employee callById(Employee entity)
    + {abstract} long count()
    + {abstract} long countByFields(Employee entity)
    + {abstract} long countByMap(Map<String, Object> conditions)
    + {abstract} List<Employee> findAllByFields(Employee entity)
    + {abstract} List<Employee> findPage(Page page, Employee entity)
    + {abstract} List<Employee> findAllByMap(Map<String, Object> conditions)
    + {abstract} int execInsertSql(String sql)
    + {abstract} int execDeleteSql(String sql)
    + {abstract} int execUpdateSql(String sql)
    + {abstract} List<Employee> execSelectSql(String sql)
}

mapper.CrudMapper <|-- mapper.EmployeeMapper

''''''''''''''''''''''''''''''''''''
' Service
''''''''''''''''''''''''''''''''''''

interface service.BaseService
{

}

interface service.CrudService<M extends CrudMapper<T>, T extends BaseEntity>
{
    + {abstract} int save(T entity)
    + {abstract} int saveAll(Collection<T> entities)
    + {abstract} int saveOrUpdate(T entity)
    + {abstract} int deleteById(T entity)
    + {abstract} int deleteLogically(T entity)
    + {abstract} int deleteAll(Collection<T> entities)
    + {abstract} int deleteAllLogically(Collection<T> entities)
    + {abstract} int deleteAllByMap(Map<String,Object> conditions)
    + {abstract} int update(T entity)
    + {abstract} int updateAllByIds(Collection<T> entities)
    + {abstract} T getById(T entity)
    + {abstract} long count()
    + {abstract} List<T> findPage(Page<T> page, T entity)
    + {abstract} List<T> findAllByFields(T entity)
    + {abstract} List<T> findAllByMap(Map<String, Object> conditions)
}

service.BaseService <|-- service.CrudService

interface service.DepartmentService<DepartmentMapper<Department>, Department>
{
}

service.CrudService <|-- service.DepartmentService

interface service.EmployeeService<EmployeeMapper<Employee>, Employee>
{
}
service.CrudService <|-- service.EmployeeService

interface service.SqlSessionFactoryService
{
    + {abstract} SqlSessionFactory getSqlSessionFactory()
}
service.BaseService <|-- service.SqlSessionFactoryService

abstract class service.AbstractBaseService
{

}
service.BaseService <|.. service.AbstractBaseService

abstract class service.AbstractCrudService
{
}
service.AbstractBaseService <|-- service.AbstractCrudService
service.CrudService <|.. service.AbstractCrudService

class service.impl.DepartmentServiceImpl
{
    + int save(Department entity)
    + int saveAll(Collection<Department> entities)
    + int saveOrUpdate(Department entity)
    + int deleteById(Department entity)
    + int deleteLogically(Department entity)
    + int deleteAll(Collection<Department> entities)
    + int deleteAllLogically(Collection<Department> entities)
    + int deleteAllByMap(Map<String,Object> conditions)
    + int update(Department entity)
    + int updateAllByIds(Collection<Department> entities)
    + Department getById(Department entity)
    + long count()
    + List<Department> findPage(Page<Department> page, Department entity)
    + List<Department> findAllByFields(Department entity)
    + List<Department> findAllByMap(Map<String, Object> conditions)
}
service.AbstractCrudService <|-- service.impl.DepartmentServiceImpl
service.DepartmentService <|.. service.impl.DepartmentServiceImpl

class service.impl.EmployeeServiceImpl
{
    + int save(Employee entity)
    + int saveAll(Collection<Employee> entities)
    + int saveOrUpdate(Employee entity)
    + int deleteById(Employee entity)
    + int deleteLogically(Employee entity)
    + int deleteAll(Collection<Employee> entities)
    + int deleteAllLogically(Collection<Employee> entities)
    + int deleteAllByMap(Map<String,Object> conditions)
    + int update(Employee entity)
    + int updateAllByIds(Collection<Employee> entities)
    + Employee getById(Employee entity)
    + long count()
    + List<Employee> findPage(Page<Employee> page, Employee entity)
    + List<Employee> findAllByFields(Employee entity)
    + List<Employee> findAllByMap(Map<String, Object> conditions)
}
service.AbstractCrudService <|-- service.impl.EmployeeServiceImpl
service.EmployeeService <|.. service.impl.EmployeeServiceImpl


''''''''''''''''''''''''''''''''''''
' Others
''''''''''''''''''''''''''''''''''''


@enduml